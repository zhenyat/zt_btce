module ZtBtce
  ##############################################################################
  #   Sends a request to BTCE Hash via Trade API 1 and returns result as a 
  #   Ref:  https://btc-e.nz/tapi/docs#main
  #
  #   Args:
  #         method  - Name of the calling API Method
  #         options - List of HTTP request parameters. 
  #                   Generated by the calling Method
  #   
  #   25.07.2017  ZT
  ##############################################################################
  def self.trade_api method, options = {}
    
    # Generate list of API parameters for HTTP request
    final_hash = {"method" => method, "nonce" => nonce}.merge options
    api_params = URI.encode_www_form(final_hash)

    signature  = OpenSSL::HMAC.hexdigest('sha512', SECRET, api_params)
    
    # Sena the request and return the result
    Net::HTTP.start(DOMAIN.split('//').last, 443, :use_ssl => true) do |http|
      headers  = {'Sign' => signature, 'Key' => KEY}
      response = http.post('/tapi', api_params, headers).body
      return JSON.parse(response) 
    end
  end

  ##############################################################################
  # Checks that response is not an error message aka:
  #   {"success":0, "error":"no orders"}
  # If error: returns empty hash, otherwise: returns response
  # 
  # caller_locations(1,1)[0].label - the calling method
  ##############################################################################  
  def self.trade_error_check response
    if response.first[1] == 0  # status = 0
      puts colored RED, "#{timestamp}  Error in method '#{caller_locations(1,1)[0].label}': #{response['error']}"
      {}
    else
      response
    end
  end
  
  def self.account_info
    trade_error_check trade_api('getInfo')
  end
  
  def self.active_orders opts = {}
    if opts['mode'].nil?
      trade_error_check trade_api('ActiveOrders', opts)
    else
      trade_error_check trade_emulator('ActiveOrders', opts)
    end
  end
  
  def self.order_info order_id, opts = {}
    if opts['mode'].nil?
      trade_error_check trade_api('OrderInfo', 'order_id' =>  order_id)
     else
      trade_error_check trade_emulator('OrderInfo', opts)
    end
  end
end
